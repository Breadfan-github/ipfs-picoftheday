{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["Buffer","require","auth","from","projectId","toString","client","create","host","port","protocol","headers","authorization","App","props","captureFile","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","buffer","result","onSubmit","console","log","add","state","path","newPicHash","picHash","contract","methods","set","send","account","then","receipt","this","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","eth","getAccounts","accounts","pic","Contract","Pic","abi","get","call","className","rel","role","src","type","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"g2cAMQA,EAAWC,EAAQ,GAAnBD,OAGFE,EACN,SAAWF,EAAOG,KAAKC,gEAAiCC,SAAS,UAE3DC,EAASC,iBAAO,CACpBC,KAAM,iBACNC,KAAM,KACNC,SAAU,QACVC,QAAS,CAAEC,cAAeV,KAKtBW,E,kDAOJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqCRC,YAAc,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OAAOC,MAAM,GAC1BC,EAAS,IAAIC,OAAOC,WAC1BF,EAAOG,kBAAkBN,GAEzBG,EAAOI,UAAY,WACjB,EAAKC,SAAS,CAACC,OAAS3B,EAAOqB,EAAOO,SACvC,CACF,EA/CkB,EAmDlBC,SAnDkB,iDAmDP,WAAOb,GAAP,0FACVA,EAAMC,iBACNa,QAAQC,IAAI,8BAFF,SAGSzB,EAAO0B,IAAI,EAAKC,MAAMN,QAH/B,cAGNC,EAHM,OAIRE,QAAQC,IAAIH,GAJJ,SAKiBA,EAAOM,KALxB,cAKFC,EALE,OAMR,EAAKT,SAAS,CAAEU,QAASD,IANjB,UAOF,EAAKF,MAAMI,SAASC,QAAQC,IAAIJ,GAAYK,KAAK,CAACrC,KAAO,EAAK8B,MAAMQ,UAAUC,MAAK,SAACC,GACxF,EAAKjB,SAAS,CAACU,QAASD,GACzB,IATO,4CAnDO,sDAEjB,EAAKF,MAAQ,CACXN,OAAS,KACTS,QAAU,SACVK,QAAU,GACVJ,SAAW,MANI,CAQlB,C,uGAbD,wGACQO,KAAKC,WADb,uBAEQD,KAAKE,qBAFb,gD,6HAeA,4FACKxB,OAAOyB,SADZ,uBAEMzB,OAAO0B,KAAO,IAAIC,IAAK3B,OAAOyB,UAFpC,SAGYzB,OAAOyB,SAASG,SAH5B,6BAIa5B,OAAO0B,KACd1B,OAAO0B,KAAO,IAAIC,IAAK3B,OAAO0B,KAAKG,iBAEnCrB,QAAQC,IAAI,uEAPlB,2C,uIAWF,2GAEUiB,EAAO1B,OAAO0B,KAFxB,SAG2BA,EAAKI,IAAIC,cAHpC,cAGUC,EAHV,OAIIV,KAAKlB,SAAS,CAACe,QAASa,EAAS,KAKzBC,EAAM,IAAIP,EAAKI,IAAII,SAASC,EAAIC,IAAK,8CAC3Cd,KAAKlB,SAAS,CAACW,SAAUkB,IAV/B,SAW4BA,EAAIjB,QAAQqB,MAAMC,OAX9C,OAWYxB,EAXZ,OAYMQ,KAAKlB,SAAS,CAACU,YAZrB,iD,0EA4CE,WACE,OACE,6BACE,yBAAKyB,UAAU,6EACb,uBACEA,UAAU,sCACV1C,OAAO,SACP2C,IAAI,uBAHN,sBAOA,wBAAID,UAAY,mBACd,wBAAIA,UAAY,oDACd,2BAAOA,UAAY,cAAnB,IAAkCjB,KAAKX,MAAMQ,QAA7C,QAIN,yBAAKoB,UAAU,wBACb,yBAAKA,UAAU,OACb,0BAAME,KAAK,OAAOF,UAAU,gCAC1B,yBAAKA,UAAU,2BACb,uBAEE1C,OAAO,SACP2C,IAAI,uBAEN,yBACAE,IAAG,iDAA4CpB,KAAKX,MAAMG,SAC1DyB,UAAY,cAKZ,mCACA,gDACA,0BAAMhC,SAAWe,KAAKf,UACpB,2BAAOoC,KAAM,OAAOC,SAAUtB,KAAK7B,cACnC,2BAAOkD,KAAM,gBAS5B,K,GAtHeE,aAyHHtD,IClIKuD,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,YACd,G","file":"static/js/main.dec7b5e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport Pic from '../abis/Pic.json'\nimport { create } from \"ipfs-http-client\"\n\nconst { Buffer } = require('buffer')\nconst projectId = '2EwXF5EKhKVGyiZPC7UkOQxi8e3';\nconst projectSecret = 'abba390662d3e7ddb36045310fd0aac0';\nconst auth =\n'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\n\nconst client = create({ \n  host: 'ipfs.infura.io',  \n  port: 5001, \n  protocol: 'https',\n  headers: { authorization: auth, },\n\n});\n\n\nclass App extends Component {\n\n  async componentWillMount(){\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      buffer : null,\n      picHash : 'sample',\n      account : '',\n      contract : null\n    }\n  }\n \n  async loadWeb3(){\n   if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        await window.ethereum.enable();\n    } else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n        console.log(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n}\n\nasync loadBlockchainData() {\n    //this function loads the current data of the user from the blockchain\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({account: accounts[0]})\n\n   //loads the pic contract\n    // const networkId = await web3.eth.net.getId()\n    // const picData = Pic.networks[networkId]\n      const pic = new web3.eth.Contract(Pic.abi, \"0x1Dd1c89C6E9894AaaF493Ce94853365cf3627891\")\n      this.setState({contract: pic})\n      const picHash = await pic.methods.get().call()\n      this.setState({picHash})\n\n}\n\n\n  captureFile = (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {    \n      this.setState({buffer : Buffer(reader.result)})\n    }\n  }\n\n//example hash: QmeaEomjTNp6KZ5kvBPeiotp548aS2kcpPqB6zP1UJP5Ga\n  //example url: https://icommunity.infura-ipfs.io/ipfs/\n   onSubmit = async (event) => {\n    event.preventDefault()\n    console.log(\"Submitting file to ipfs...\")\n    let result = await client.add(this.state.buffer)\n      console.log(result)\n      const newPicHash = await result.path\n      this.setState({ picHash: newPicHash})\n      await this.state.contract.methods.set(newPicHash).send({from : this.state.account}).then((receipt)=> {\n        this.setState({picHash: newPicHash})\n      })}\n\n  \n\n\n  render() {\n    return (\n      <div>\n        <nav className=\"text-white navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\" \n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Picture of the day\n          </a>\n          <ul className = 'navbar-nav px-3'>\n            <li className = 'nav-item text-nowrap d-none d-sm-none d-sm-block'>\n              <small className = 'text-white'> {this.state.account} </small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  \n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                <img \n                src={`https://icommunity.infura-ipfs.io/ipfs/${this.state.picHash}`}\n                className = \"App-logo\"\n                />\n\n                </a>\n                 \n                <p>&nbsp;</p>\n                <h2> Change Picture </h2>\n                <form onSubmit ={this.onSubmit}>\n                  <input type ='file' onChange={this.captureFile} />\n                  <input type ='submit'/>\n                </form>\n             \n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}